//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ClassLibrary1
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Student))]
    [KnownType(typeof(CourseTeach))]
    public partial class CourseSelect: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public string StuNum
        {
            get { return _stuNum; }
            set
            {
                if (_stuNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“StuNum”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    if (!IsDeserializing)
                    {
                        if (Student != null && Student.StuNum != value)
                        {
                            Student = null;
                        }
                    }
                    _stuNum = value;
                    OnPropertyChanged("StuNum");
                }
            }
        }
        private string _stuNum;
    
        [DataMember]
        public string TeaNum
        {
            get { return _teaNum; }
            set
            {
                if (_teaNum != value)
                {
                    ChangeTracker.RecordOriginalValue("TeaNum", _teaNum);
                    if (!IsDeserializing)
                    {
                        if (CourseTeach != null && CourseTeach.TeaNum != value)
                        {
                            CourseTeach = null;
                        }
                    }
                    _teaNum = value;
                    OnPropertyChanged("TeaNum");
                }
            }
        }
        private string _teaNum;
    
        [DataMember]
        public string CrsNum
        {
            get { return _crsNum; }
            set
            {
                if (_crsNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“CrsNum”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    if (!IsDeserializing)
                    {
                        if (CourseTeach != null && CourseTeach.CrsNum != value)
                        {
                            CourseTeach = null;
                        }
                    }
                    _crsNum = value;
                    OnPropertyChanged("CrsNum");
                }
            }
        }
        private string _crsNum;
    
        [DataMember]
        public System.DateTime SchoolYear
        {
            get { return _schoolYear; }
            set
            {
                if (_schoolYear != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“SchoolYear”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    if (!IsDeserializing)
                    {
                        if (CourseTeach != null && CourseTeach.SchoolYear != value)
                        {
                            CourseTeach = null;
                        }
                    }
                    _schoolYear = value;
                    OnPropertyChanged("SchoolYear");
                }
            }
        }
        private System.DateTime _schoolYear;
    
        [DataMember]
        public int Semester
        {
            get { return _semester; }
            set
            {
                if (_semester != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Semester”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    if (!IsDeserializing)
                    {
                        if (CourseTeach != null && CourseTeach.Semester != value)
                        {
                            CourseTeach = null;
                        }
                    }
                    _semester = value;
                    OnPropertyChanged("Semester");
                }
            }
        }
        private int _semester;
    
        [DataMember]
        public Nullable<decimal> Grade
        {
            get { return _grade; }
            set
            {
                if (_grade != value)
                {
                    _grade = value;
                    OnPropertyChanged("Grade");
                }
            }
        }
        private Nullable<decimal> _grade;
    
        [DataMember]
        public Nullable<bool> Selecting
        {
            get { return _selecting; }
            set
            {
                if (_selecting != value)
                {
                    _selecting = value;
                    OnPropertyChanged("Selecting");
                }
            }
        }
        private Nullable<bool> _selecting;

        #endregion
        #region 导航属性
    
        [DataMember]
        public Student Student
        {
            get { return _student; }
            set
            {
                if (!ReferenceEquals(_student, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // 这是识别关系的依赖端，因此主体端在设置后不能更改，
                        // 否则它只能设置为主键值与依赖外键相同的实体。
                        if (StuNum != value.StuNum)
                        {
                            throw new InvalidOperationException("仅当依赖端处于“已添加”状态时，才能更改识别关系的主体端。");
                        }
                    }
                    var previousValue = _student;
                    _student = value;
                    FixupStudent(previousValue);
                    OnNavigationPropertyChanged("Student");
                }
            }
        }
        private Student _student;
    
        [DataMember]
        public CourseTeach CourseTeach
        {
            get { return _courseTeach; }
            set
            {
                if (!ReferenceEquals(_courseTeach, value))
                {
                    var previousValue = _courseTeach;
                    _courseTeach = value;
                    FixupCourseTeach(previousValue);
                    OnNavigationPropertyChanged("CourseTeach");
                }
            }
        }
        private CourseTeach _courseTeach;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // 此实体类型是至少一个执行级联删除的关联中的依赖端。
        // 此事件处理程序将处理在删除主体端时发生的通知。
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Student = null;
            CourseTeach = null;
        }

        #endregion
        #region 关联修复
    
        private void FixupStudent(Student previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourseSelect.Contains(this))
            {
                previousValue.CourseSelect.Remove(this);
            }
    
            if (Student != null)
            {
                if (!Student.CourseSelect.Contains(this))
                {
                    Student.CourseSelect.Add(this);
                }
    
                StuNum = Student.StuNum;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Student")
                    && (ChangeTracker.OriginalValues["Student"] == Student))
                {
                    ChangeTracker.OriginalValues.Remove("Student");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Student", previousValue);
                }
                if (Student != null && !Student.ChangeTracker.ChangeTrackingEnabled)
                {
                    Student.StartTracking();
                }
            }
        }
    
        private void FixupCourseTeach(CourseTeach previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CourseSelect.Contains(this))
            {
                previousValue.CourseSelect.Remove(this);
            }
    
            if (CourseTeach != null)
            {
                if (!CourseTeach.CourseSelect.Contains(this))
                {
                    CourseTeach.CourseSelect.Add(this);
                }
    
                TeaNum = CourseTeach.TeaNum;
                CrsNum = CourseTeach.CrsNum;
                SchoolYear = CourseTeach.SchoolYear;
                Semester = CourseTeach.Semester;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CourseTeach")
                    && (ChangeTracker.OriginalValues["CourseTeach"] == CourseTeach))
                {
                    ChangeTracker.OriginalValues.Remove("CourseTeach");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CourseTeach", previousValue);
                }
                if (CourseTeach != null && !CourseTeach.ChangeTracker.ChangeTrackingEnabled)
                {
                    CourseTeach.StartTracking();
                }
            }
        }

        #endregion
    }
}
