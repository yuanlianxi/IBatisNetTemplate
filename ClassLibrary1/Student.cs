//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ClassLibrary1
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CourseSelect))]
    public partial class Student: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public string StuNum
        {
            get { return _stuNum; }
            set
            {
                if (_stuNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“StuNum”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _stuNum = value;
                    OnPropertyChanged("StuNum");
                }
            }
        }
        private string _stuNum;
    
        [DataMember]
        public string StuName
        {
            get { return _stuName; }
            set
            {
                if (_stuName != value)
                {
                    _stuName = value;
                    OnPropertyChanged("StuName");
                }
            }
        }
        private string _stuName;
    
        [DataMember]
        public string StuGender
        {
            get { return _stuGender; }
            set
            {
                if (_stuGender != value)
                {
                    _stuGender = value;
                    OnPropertyChanged("StuGender");
                }
            }
        }
        private string _stuGender;
    
        [DataMember]
        public int StuAge
        {
            get { return _stuAge; }
            set
            {
                if (_stuAge != value)
                {
                    _stuAge = value;
                    OnPropertyChanged("StuAge");
                }
            }
        }
        private int _stuAge;
    
        [DataMember]
        public string StuPhoto
        {
            get { return _stuPhoto; }
            set
            {
                if (_stuPhoto != value)
                {
                    _stuPhoto = value;
                    OnPropertyChanged("StuPhoto");
                }
            }
        }
        private string _stuPhoto;
    
        [DataMember]
        public Nullable<System.DateTime> StuSchoolStartDate
        {
            get { return _stuSchoolStartDate; }
            set
            {
                if (_stuSchoolStartDate != value)
                {
                    _stuSchoolStartDate = value;
                    OnPropertyChanged("StuSchoolStartDate");
                }
            }
        }
        private Nullable<System.DateTime> _stuSchoolStartDate;
    
        [DataMember]
        public string StuPassword
        {
            get { return _stuPassword; }
            set
            {
                if (_stuPassword != value)
                {
                    _stuPassword = value;
                    OnPropertyChanged("StuPassword");
                }
            }
        }
        private string _stuPassword;

        #endregion
        #region 导航属性
    
        [DataMember]
        public TrackableCollection<CourseSelect> CourseSelect
        {
            get
            {
                if (_courseSelect == null)
                {
                    _courseSelect = new TrackableCollection<CourseSelect>();
                    _courseSelect.CollectionChanged += FixupCourseSelect;
                }
                return _courseSelect;
            }
            set
            {
                if (!ReferenceEquals(_courseSelect, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_courseSelect != null)
                    {
                        _courseSelect.CollectionChanged -= FixupCourseSelect;
                        // 这是执行级联删除的关联中的主体端。
                        // 移除当前集合中所有实体的级联删除事件处理程序。
                        foreach (CourseSelect item in _courseSelect)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _courseSelect = value;
                    if (_courseSelect != null)
                    {
                        _courseSelect.CollectionChanged += FixupCourseSelect;
                        // 这是执行级联删除的关联中的主体端。
                        // 为新集合中已存在的所有实体添加级联删除事件处理程序。
                        foreach (CourseSelect item in _courseSelect)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CourseSelect");
                }
            }
        }
        private TrackableCollection<CourseSelect> _courseSelect;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CourseSelect.Clear();
        }

        #endregion
        #region 关联修复
    
        private void FixupCourseSelect(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CourseSelect item in e.NewItems)
                {
                    item.Student = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CourseSelect", item);
                    }
                    // 这是执行级联删除的关联中的主体端。
                    // 更新事件侦听器以引用新依赖。
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CourseSelect item in e.OldItems)
                {
                    if (ReferenceEquals(item.Student, this))
                    {
                        item.Student = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CourseSelect", item);
                        // 删除此识别关联的依赖端。如果当前状态为“已添加”，
                        // 则允许更改关系而不会导致删除依赖。
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // 这是执行级联删除的关联中的主体端。
                    // 从事件侦听器中移除前一个依赖。
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
